from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram import Bot, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from src.configs.logger_setup import logger
from src.domain.bot_service.functions import BotFunctions
from src.domain.buttons import check_group, start_sending_keyboard, channel_or_group
from src.domain.bot_service.models import FSMAdmin
from src.domain.buttons import choice_group
from src.domain.vk_router_service.service import VkRouterService


class BotService(BotFunctions, VkRouterService):

	def __init__(self, bot: Bot, dp: Dispatcher) -> None:
		BotFunctions.__init__(self, bot, dp)
		VkRouterService.__init__(self, bot)
		self.bot = bot
		self.dp = dp


	@staticmethod
	async def start_bot_service(message: Message, state: FSMContext) -> None:
		logger.info("–ë–æ—Ç —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª!")
		current_state = await state.get_state()

		if current_state is not None:
			await state.clear()

		await message.answer(
			f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}.\n"
			f"–°–ø–µ—Ä–≤–∞ –¥–æ–±–∞–≤—å—Ç–µ –ë–æ—Ç –Ω–∞ –≤–∞—à—É –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª –∏ —Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
			reply_markup=check_group,
			parse_mode=ParseMode.MARKDOWN
		)


	@staticmethod
	async def channel_or_group_service(message: Message) -> None:
		await message.answer(
			"–û—Ç–ª–∏—á–Ω–æ! üéâ\n\n"
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏, –∫—É–¥–∞ —Ç—ã –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞:\n"
			"üì¢ –ù–∞ `–ö–∞–Ω–∞–ª` –∏–ª–∏ üó£Ô∏è –≤ `–ì—Ä—É–ø–ø—É`?",
			reply_markup=channel_or_group
		)

		logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–æ–º –∏ –≥—Ä—É–ø–ø–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")


	@staticmethod
	async def get_id_in_group(message: Message) -> None:
		await message.answer(f"ID —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: {abs(message.chat.id)}")

		logger.info("ID –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ")


	@staticmethod
	async def get_channel_message(message: Message, state: FSMContext) -> None:
		await message.answer(
			"–•–æ—Ä–æ—à–æ. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞\n"
			"–ö–æ—Ç–æ—Ä–æ–º—É –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ—Ç –±–æ—Ç",
			reply_markup=ReplyKeyboardRemove()
		)

		await state.set_state(FSMAdmin.telegram_channel_id)

		logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞ –Ω–∞ –∫–∞–Ω–∞–ª!")


	@staticmethod
	async def get_channel_id_service(message: Message, state: FSMContext) -> None:
		if message.forward_from_chat:
			forward_chat_id = message.forward_from_chat.id
			forward_chat_title = message.forward_from_chat.title

			try:
				bot_member = await message.bot.get_chat_member(chat_id=forward_chat_id, user_id=message.bot.id)

				if bot_member:
					await message.answer(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª. –ò–º—è –∫–∞–Ω–∞–ª–∞ {forward_chat_title}")

					await state.update_data(telegram_group_id=abs(forward_chat_id))
					await state.set_state(FSMAdmin.vk_group_id)

					await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Url –≥—Ä—É–ø–ø—ã Vk")

			except TelegramBadRequest:
				await message.answer("–ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª. \n"
				                     "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—ç –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª–µ–Ω —ç—Ç–æ—Ç –±–æ—Ç")

		else:
			await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –ö–∞–Ω–∞–ª–∞")


	@staticmethod
	async def get_group_id(message: Message, state: FSMContext) -> None:
		await state.set_state(FSMAdmin.telegram_group_id)

		await message.answer(
			"–•–æ—Ä–æ—à–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ì—Ä—É–ø–ø—ã –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ—Ç –±–æ—Ç\n\n"
			"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/get_id` –Ω–∞ –≤–∞—à—É –≥—Ä—É–ø–ø—É.",
			parse_mode=ParseMode.MARKDOWN, reply_markup=ReplyKeyboardRemove()
		)


	async def check_group(self, message: Message, state: FSMContext) -> None:
		group_id = await self.is_integer_string(message.text)

		if group_id:
			await self.is_bot_in_group(message, group_id, state)

		else:
			logger.info("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ì—Ä—É–ø–ø—ã")
			await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ì—Ä—É–ø–ø—ã.\n"
			                     "–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")



	async def get_vk_group_id_service(self, message: Message, state: FSMContext) -> None:
		if message.text.startswith("https://vk.com/"):
			group_url = message.text
			group_name = group_url.strip('/').split('/')[-1]

			group_info = await self.check_vk_group(group_name)

			if group_info:
				await message.answer(
					f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Url –ì—Ä—É–ø–ø—ã.\n"
					f"–ò–º—è –≥—Ä—É–ø–ø—ã {group_info['name'] if group_info['name'] is not None else group_info['screen_name']}."
				)

				await message.answer("–≠—Ç–æ –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞?\n"
				                     "–ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î—Ä—É–≥–æ–µ'", reply_markup=choice_group)

				group_wall = await self.get_wall(group_info["id"])
				wall = group_wall["response"]["items"]

				for event in wall:
					last_wall_post_id = event["id"]

					await state.update_data(
						vk_group_id=group_info["id"], last_post_id=last_wall_post_id, send_status=False)

				await state.set_state(FSMAdmin.yes_or_no)

			else:
				await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Url –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		else:
			await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Url –≥—Ä—É–ø–ø—ã. Url –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `https://vk.com/`")


	@staticmethod
	async def group_choice_service(message: Message, state: FSMContext) -> None:
		if message.text == "–î—Ä—É–≥–æ–µ":
			logger.info("–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞!")

			await message.answer("–í–≤–µ–¥–∏—Ç–µ Url –≥—Ä—É–ø–ø—ã –∑–∞–Ω–æ–≤–æ:", reply_markup=ReplyKeyboardRemove())
			await state.set_state(FSMAdmin.vk_group_id)

		elif message.text == "–î–∞":
			logger.info("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥—Ä—É–ø–ø–∞!")

			await message.answer(
				"–í—ã –≤–µ—Ä–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
				reply_markup=start_sending_keyboard
			)

			await state.set_state(FSMAdmin.start_sending)


