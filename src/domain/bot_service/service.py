from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram import Bot, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from src.configs.logger_setup import logger
from src.domain.bot_service.functions import BotFunctions
from src.domain.buttons import check_group, start_sending_keyboard
from src.domain.bot_service.models import FSMAdmin
from src.domain.buttons import choice_group
from src.domain.vk_bot_service.service import VkBotService


class BotService(BotFunctions, VkBotService):

	def __init__(self, bot: Bot, dp: Dispatcher) -> None:
		BotFunctions.__init__(self, bot, dp)
		VkBotService.__init__(self, bot)
		self.bot = bot
		self.dp = dp


	@staticmethod
	async def start_bot_service(message: Message, state: FSMContext) -> None:
		logger.info("–ë–æ—Ç —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª!")

		if message.chat.type == 'group' or message.chat.type == 'supergroup':
			await message.answer(f"ID —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: {message.chat.id}")
			logger.info("–ë–æ—Ç —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª –≤ –≥—Ä—É–ø–ø–µ!")

		else:
			current_state = await state.get_state()

			if current_state is not None:
				await state.clear()

			await message.answer(
				f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}.\n"
				f"–°–ø–µ—Ä–≤–∞ –¥–æ–±–∞–≤—å—Ç–µ –ë–æ—Ç –Ω–∞ –≤–∞—à—É –≥—Ä—É–ø–ø—É",
				reply_markup=check_group,
				parse_mode=ParseMode.MARKDOWN
			)


	@staticmethod
	async def get_group_id(message: Message, state: FSMContext) -> None:
		await state.set_state(FSMAdmin.telegram_group_id)

		if message.chat.type != 'group':
			await message.answer(
				"–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ì—Ä—É–ø–ø—ã –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ—Ç –±–æ—Ç\n\n"
				"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '/start' –Ω–∞ –≤–∞—à—É –≥—Ä—É–ø–ø—É.",
				parse_mode=ParseMode.MARKDOWN, reply_markup=ReplyKeyboardRemove()
			)


	async def check_group(self, message: Message, state: FSMContext) -> None:
		group_id = await self.is_integer_string(message.text)

		if group_id:
			await self.is_bot_in_group(message, group_id, state)

		else:
			await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ì—Ä—É–ø–ø—ã.\n"
			                     "–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")


	async def is_bot_in_group(self, message: Message, group_id: int, state: FSMContext) -> None:
		try:
			chat = await self.bot.get_chat(-group_id)
			await message.answer(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É: {chat.title}", parse_mode=ParseMode.MARKDOWN)

			await state.update_data(telegram_group_id=message.text)
			await state.set_state(FSMAdmin.vk_group_id)

			await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≥—Ä—É–ø–ø—ã Vk")

		except TelegramBadRequest as e:
			logger.error(f"{e}")
			await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

		except Exception as e:
			logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


	async def get_vk_group_id_service(self, message: Message, state: FSMContext) -> None:
		vk_group_id = await self.is_integer_string(message.text)

		if vk_group_id:
			group_name = await self.check_vk_group(vk_group_id)

			if group_name:
				await message.answer(f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ì—Ä—É–ø–ø—ã.\n"
				                     f"–ò–º—è –≥—Ä—É–ø–ø—ã {group_name}.")

				await message.answer("–≠—Ç–æ –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞?\n"
				                     "–ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î—Ä—É–≥–æ–µ'", reply_markup=choice_group)

				await state.update_data(vk_group_id=vk_group_id)
				await state.set_state(FSMAdmin.vk_group_token)

		else:
			await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


	@staticmethod
	async def group_choice_service(message: Message, state: FSMContext) -> None:
		if message.text == "–î—Ä—É–≥–æ–µ":
			await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –∑–∞–Ω–æ–≤–æ:", reply_markup=ReplyKeyboardRemove())
			await state.set_state(FSMAdmin.vk_group_id)

		elif message.text == "–î–∞":
			await message.reply(
				"–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ Long Poll API –∏–∑ –≥—Ä—É–ø–ø—ã Vk.\n"
				"\n"
				"–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ —Ç–æ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–æ—Ç –∑–¥–µ—Å—åüëáüëáüëá", reply_markup=ReplyKeyboardRemove())

			await message.answer(
				"https://dev.vk.com/ru/api/access-token/"
				"getting-started#%D0%9A%D0%BB%D1%8E%D1%87%20%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%"
				"D0%B0%20%D1%81%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%B0"
			)

			await state.set_state(FSMAdmin.vk_group_token)


	async def get_long_pool_key(self, message: Message, state: FSMContext) -> None:
		data = await state.get_data()
		vk_group_id = data.get('vk_group_id')

		long_poll_data = await self.get_server_key(vk_group_id, message.text)

		if "response" in long_poll_data:
			await message.answer(
				"–í—ã –≤–µ—Ä–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
				reply_markup=start_sending_keyboard
			)

			long_poll_url = long_poll_data["response"]["server"]
			long_poll_token = long_poll_data["response"]["key"]
			ts = long_poll_data["response"]["ts"]

			await state.update_data(
				vk_group_token=message.text, vk_long_poll_server_url=long_poll_url,
				vk_long_poll_server_token=long_poll_token, ts=ts, send_status=False
			)

			await state.set_state(FSMAdmin.start)

		else:
			logger.warn("Incorrect Token")
			await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")






